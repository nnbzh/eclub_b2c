<?php

namespace App\Http\Controllers\Admin;

use App\Events\ImageUploadedEvent;

class ImageCrudController extends BaseCrudController
{
    protected bool $hasReorderOperation = true;

    private $imageableId;
    private $imageableType;

    public function setup()
    {
        parent::setup(); // TODO: Change the autogenerated stub;
        $this->imageableId = \Session::get('imageable_id');
        $this->imageableType = \Session::get('imageable_type');
    }

    protected function setupListOperation()
    {
        parent::setupListOperation(); // TODO: Change the autogenerated
        if ($this->imageableId) {
            $this->crud->addClause('where', 'imageable_id', '=', $this->imageableId);
        }
        if ($this->imageableType) {
            $this->crud->addClause('where', 'imageable_type', '=', $this->imageableType);
        }
        $this->crud->addColumn([
            'name' => 'src',
            'label' => trans('admin.image.singular'),
            'type' => 'image',
            'disk' => 's3',
            'width' => '150px',
            'height' => '150px',
        ]);
    }

    protected function setupCreateOperation()
    {
        parent::setupCreateOperation(); // TODO: Change the autogenerated stub
        $idField = [
            'name' => 'imageable_id',
            'label' => "ID объекта",
            'type' => 'number'
        ];
        if ($this->imageableId) {
            $idField['default'] = $this->imageableId;
            $idField['attributes']['readonly'] = 'readonly';
        }
        $typeField = [
            'name' => 'imageable_type',
            'label' => 'Тип (класс) объекта',
        ];
        if ($this->imageableType) {
            $typeField['default'] = $this->imageableType;
            $typeField['attributes']['readonly'] = 'readonly';
        }
        $this->crud->addField($idField);
        $this->crud->addField($typeField);
        $this->crud->addField([
            'name' => 'src',
            'label' => trans('admin.image.singular'),
            'type' => 'image',
            'disk' => 's3',
            'width' => '150px',
            'height' => '150px',
        ]);
    }

    public function store()
    {
        $this->crud->hasAccessOrFail('create');
        $request = $this->crud->validateRequest();
        $binary = $request->request->get('src');
        $request->request->remove('src');
        $data = [
            'imageable_id'      => $this->imageableId,
            'imageable_type'    => $this->imageableType,
        ];
        event(new ImageUploadedEvent($binary, $data, 'create'));
        $this->crud->setSaveAction('save_and_back');

        return redirect(route('image.index'));
    }

    public function edit($id)
    {
        app()->setLocale(request('_locale', 'ru'));

        return $this->parentEdit($id);
    }

    public function update()
    {
        $this->crud->hasAccessOrFail('update');
        $request = $this->crud->validateRequest();
        $binary = $request->request->get('src');
        $request->request->remove('src');
        $data = [
            'locale'=> $request->get('_locale', 'ru'),
            'entry' => $this->crud->getCurrentEntry(),
        ];
        event(new ImageUploadedEvent($binary, $data, 'update'));
        $this->crud->setSaveAction();

        return $this->crud->performSaveAction();
    }

    private function filterRequest($request) {

    }

    protected function setupUpdateOperation()
    {
        $this->crud->addField([
            'name' => 'src',
            'label' => trans('admin.image.singular'),
            'type' => 'image',
            'disk' => 's3',
            'width' => '150px',
            'height' => '150px',
        ]);
    }

    protected function setupReorderOperation($field = 'htmlImage')
    {
        parent::setupReorderOperation($field); // TODO: Change the autogenerated stub
        if ($this->imageableId) {
            $this->crud->addClause('where', 'imageable_id', '=', $this->imageableId);
        }
        if ($this->imageableType) {
            $this->crud->addClause('where', 'imageable_type', '=', $this->imageableType);
        }
    }
}
